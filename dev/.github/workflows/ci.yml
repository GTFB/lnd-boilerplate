name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        bun-version: [latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'bun'
          
      - name: Setup Bun ${{ matrix.bun-version }}
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ matrix.bun-version }}
          
      - name: Install dependencies
        run: bun install
        
      - name: Run linter
        run: bun run lint
        
      - name: Run tests with coverage
        run: bun test --coverage
        
      - name: Generate coverage report
        run: bun run test:coverage:badge
        
      - name: Update coverage badge in README
        run: bun run scripts/update-coverage-badge.ts
         
      - name: Commit coverage badge update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "üìä Update coverage badges [skip ci]" || exit 0
          git push
          
      - name: Check test coverage threshold
        id: coverage
        run: |
          # Parse coverage from test output using our script
          COVERAGE_OUTPUT=$(bun run test:coverage:badge 2>&1)
          
          # Extract coverage percentages from script output
          FUNC_COVERAGE=$(echo "$COVERAGE_OUTPUT" | grep "Function coverage:" | sed 's/.*Function coverage: \([0-9.]*\)%.*/\1/')
          LINE_COVERAGE=$(echo "$COVERAGE_OUTPUT" | grep "Line coverage:" | sed 's/.*Line coverage: \([0-9.]*\)%.*/\1/')
          
          echo "Function coverage: ${FUNC_COVERAGE}%"
          echo "Line coverage: ${LINE_COVERAGE}%"
          
          # Check if coverage is above 90%
          if (( $(echo "$FUNC_COVERAGE < 90" | bc -l) )); then
            echo "‚ùå Function coverage ($FUNC_COVERAGE%) is below 90% threshold"
            exit 1
          fi
          
          if (( $(echo "$LINE_COVERAGE < 90" | bc -l) )); then
            echo "‚ùå Line coverage ($LINE_COVERAGE%) is below 90% threshold"
            exit 1
          fi
          
          echo "‚úÖ Coverage thresholds met: Functions ${FUNC_COVERAGE}%, Lines ${LINE_COVERAGE}%"
          
          # Set output for other jobs
          echo "func_coverage=$FUNC_COVERAGE" >> $GITHUB_OUTPUT
          echo "line_coverage=$LINE_COVERAGE" >> $GITHUB_OUTPUT
          
      - name: Build project
        run: bun run build
        
      - name: Validate project structure
        run: |
          # Check if required directories exist
          if [ ! -d "src" ]; then
            echo "‚ùå src/ directory missing"
            exit 1
          fi
          
          if [ ! -d "config" ]; then
            echo "‚ùå config/ directory missing"
            exit 1
          fi
          
          # Note: data/ directory is no longer required as we use external storage
          # if [ ! -d "data" ]; then
          #   echo "‚ùå data/ directory missing"
          #   exit 1
          # fi
          
          if [ ! -f "config.json" ]; then
            echo "‚ùå config.json missing"
            exit 1
          fi
          
          echo "‚úÖ Project structure validation passed"
          
      - name: Check for root database files
        run: |
          # Ensure no database files are created in root during tests
          if [ -f "dev-agent.db" ] || [ -f ".dev-agent.db" ]; then
            echo "‚ùå Database files found in root directory"
            ls -la *.db .*.db 2>/dev/null || true
            exit 1
          fi
          
          echo "‚úÖ No database files in root directory"
          
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'bun'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Run security audit
        run: bun audit
        
      - name: Check for secrets in code
        run: |
          # Check for potential secrets in code
          if grep -r "password\|secret\|token\|key" src/ --include="*.ts" --include="*.js" | grep -v "//\|/\*\|import\|export" | grep -v "password\|secret\|token\|key"; then
            echo "‚ö†Ô∏è Potential secrets found in code"
            exit 1
          fi
          
          echo "‚úÖ No obvious secrets found in code"
          
  deploy-preview:
     runs-on: ubuntu-latest
     needs: [test, security]
     if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop'
     
     steps:
       - name: Checkout code
         uses: actions/checkout@v4
         
       - name: Setup Node.js
         uses: actions/setup-node@v4
         with:
           node-version: '18'
           cache: 'bun'
           
       - name: Setup Bun
         uses: oven-sh/setup-bun@v1
         with:
           bun-version: latest
           
       - name: Install dependencies
         run: bun install
         
       - name: Build preview
         run: bun run build
         
       - name: Comment PR with preview info
         uses: actions/github-script@v7
         with:
           script: |
             github.rest.issues.createComment({
               issue_number: context.issue.number,
               owner: context.repo.owner,
               repo: context.repo.repo,
               body: `üöÄ **Preview Build Successful!**
               
               ‚úÖ All tests passed
               ‚úÖ Linting passed  
               ‚úÖ Security checks passed
               ‚úÖ Coverage thresholds met
               
               Ready for review and merge to develop!`
             })
             
  # Note: Coverage badge updates are now handled automatically in the test job
