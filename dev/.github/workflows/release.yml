name: Release Management

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'config.json'
      - 'CHANGELOG.md'
      - 'README.md'

  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  validate-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.base.ref == 'main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Validate project structure
        run: bun run src/scripts/validate-structure.ts
        
      - name: Check version consistency
        run: |
          # Check if version in .dev-agent.json matches CHANGELOG
          CONFIG_VERSION=$(bun run -c "import { readFileSync } from 'fs'; const config = JSON.parse(readFileSync('config.json', 'utf8')); console.log(config.version);")
          CHANGELOG_VERSION=$(grep -o '## \[[0-9]\+\.[0-9]\+\.[0-9]\+' CHANGELOG.md | head -1 | sed 's/## \[//')
          
          if [ "$CONFIG_VERSION" != "$CHANGELOG_VERSION" ]; then
            echo "‚ùå Version mismatch: config=$CONFIG_VERSION, changelog=$CHANGELOG_VERSION"
            exit 1
          fi
          
          echo "‚úÖ Version consistency check passed: $CONFIG_VERSION"
          
      - name: Run tests
        run: bun test
        
  create-release:
    runs-on: ubuntu-latest
    needs: validate-release
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Get version from config
        id: version
        run: |
          VERSION=$(bun run -c "import { readFileSync } from 'fs'; const config = JSON.parse(readFileSync('config.json', 'utf8')); console.log(config.version);")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            
            See [CHANGELOG.md](CHANGELOG.md) for detailed release notes.
            
            ## Installation
            
            ```bash
            npm install dev-agent@${{ steps.version.outputs.version }}
            # or
            bun add dev-agent@${{ steps.version.outputs.version }}
            ```
            
            ## Breaking Changes
            
            ${{ contains(github.event.pull_request.labels.*.name, 'breaking-change') && '‚ö†Ô∏è This release contains breaking changes. Please review the changelog before upgrading.' || '‚úÖ No breaking changes in this release.' }}
            
          draft: false
          prerelease: false
          
      - name: Update database version
        run: |
          # This would update the version in the database
          # For now, we'll just log it
          echo "Database version should be updated to ${{ steps.version.outputs.version }}"
          
  notify-team:
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.create-release.result == 'success'
        run: |
          echo "üéâ Release v${{ needs.create-release.outputs.version }} created successfully!"
          echo "Check: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.create-release.outputs.version }}"
          
      - name: Notify on failure
        if: needs.create-release.result == 'failure'
        run: |
          echo "‚ùå Release creation failed!"
          echo "Check the workflow logs for details"
